## 1. CORE CONCEPTS

### Initialize custom Bootstrap build
// Install Bootstrap source
npm install bootstrap @popperjs/core

// Custom import (scss/main.scss)
@import "../node_modules/bootstrap/scss/functions";
@import "custom-variables"; // Your overrides
@import "../node_modules/bootstrap/scss/variables";
@import "../node_modules/bootstrap/scss/mixins";
@import "../node_modules/bootstrap/scss/bootstrap";

### Configure responsive breakpoints
// _custom-variables.scss
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1440px // Custom breakpoint
);

## 2. ADVANCED LAYOUTS

### Implement CSS Grid integration
.custom-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  @include media-breakpoint-up(lg) {
    grid-template-columns: repeat(3, 1fr);
  }
}

### Create responsive aspect ratios
.media-container {
  @include aspect-ratio(16, 9);
  iframe {
    @extend .ratio;
  }
}

## 3. COMPONENT DEEP DIVE

### Extend navbar with mega menu
<nav class="navbar navbar-expand-xxl">
  <div class="container-fluid">
    <div class="dropdown-menu mega-menu">
      <div class="row">
        <div class="col-xxl-3">
          <!-- Mega menu content -->
        </div>
      </div>
    </div>
  </div>
</nav>

### Build custom cards
.card-hover {
  transition: transform 0.3s ease;
  &:hover {
    transform: translateY(-5px);
    box-shadow: $box-shadow-lg;
  }
}

## 4. PERFORMANCE OPTIMIZATION

### Implement lazy loading
<img data-src="image.jpg" class="lazyload" alt="...">

<script>
// Using Intersection Observer API
const lazyImages = document.querySelectorAll('.lazyload');
const imageObserver = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      const img = entry.target;
      img.src = img.dataset.src;
      imageObserver.unobserve(img);
    }
  });
});
lazyImages.forEach(img => imageObserver.observe(img));
</script>

## 5. DARK MODE SYSTEM

### Implement theme switcher
// JavaScript
const themeToggle = document.getElementById('themeToggle');
themeToggle.addEventListener('click', () => {
  document.documentElement.setAttribute('data-bs-theme', 
    document.documentElement.getAttribute('data-bs-theme') === 'dark' ? 'light' : 'dark');
});

// SCSS
[data-bs-theme="dark"] {
  --bs-body-color: #adb5bd;
  --bs-body-bg: #212529;
  
  .navbar {
    --bs-navbar-color: rgba(255, 255, 255, 0.75);
  }
}


## 6. CUSTOM COMPONENTS

### Create animated accordion
.accordion-button:not(.collapsed) {
  &::after {
    transform: rotate(-180deg);
    transition: transform 0.3s ease;
  }
}

### Build dashboard layout
<div class="dashboard-grid">
  <aside class="sidebar">...</aside>
  <main class="main-content">...</main>
  <footer class="dashboard-footer">...</footer>
</div>

// SCSS
.dashboard-grid {
  display: grid;
  grid-template:
    "sidebar main" auto
    "sidebar footer" auto / 250px 1fr;
  min-height: 100vh;
}


## 7. ACCESSIBILITY

### Enhance component accessibility
<nav aria-label="Main navigation">
  <div role="navigation" aria-current="page">...</div>
</nav>

<button aria-expanded="false" aria-controls="dropdownMenu">
  Toggle Menu
</button>
