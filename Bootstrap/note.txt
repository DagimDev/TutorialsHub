## 1. CORE CONCEPTS

// Install Bootstrap source
npm install bootstrap @popperjs/core

// Custom import (scss/main.scss)
@import "../node_modules/bootstrap/scss/functions";
@import "custom-variables"; // Your overrides
@import "../node_modules/bootstrap/scss/variables";
@import "../node_modules/bootstrap/scss/mixins";
@import "../node_modules/bootstrap/scss/bootstrap";

### Configure responsive breakpoints
// _custom-variables.scss
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1440px // Custom breakpoint
);

## 2. ADVANCED LAYOUTS

.custom-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  @include media-breakpoint-up(lg) {
    grid-template-columns: repeat(3, 1fr);
  }
}

####
.media-container {
  @include aspect-ratio(16, 9);
  iframe {
    @extend .ratio;
  }
}

## 3. COMPONENT DEEP DIVE
### 
<nav class="navbar navbar-expand-xxl">
  <div class="container-fluid">
    <div class="dropdown-menu mega-menu">
      <div class="row">
        <div class="col-xxl-3">
          <!-- Mega menu content -->
        </div>
      </div>
    </div>
  </div>
</nav>

### 
.card-hover {
  transition: transform 0.3s ease;
  &:hover {
    transform: translateY(-5px);
    box-shadow: $box-shadow-lg;
  }
}

## 4. PERFORMANCE OPTIMIZATION

### 
<img data-src="image.jpg" class="lazyload" alt="...">

<script>
// Using Intersection Observer API
const lazyImages = document.querySelectorAll('.lazyload');
const imageObserver = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      const img = entry.target;
      img.src = img.dataset.src;
      imageObserver.unobserve(img);
    }
  });
});
lazyImages.forEach(img => imageObserver.observe(img));
</script>

## 5. DARK MODE SYSTEM

### 
// JavaScript
const themeToggle = document.getElementById('themeToggle');
themeToggle.addEventListener('click', () => {
  document.documentElement.setAttribute('data-bs-theme', 
    document.documentElement.getAttribute('data-bs-theme') === 'dark' ? 'light' : 'dark');
});

// SCSS
[data-bs-theme="dark"] {
  --bs-body-color: #adb5bd;
  --bs-body-bg: #212529;
  
  .navbar {
    --bs-navbar-color: rgba(255, 255, 255, 0.75);
  }
}

## 6. CUSTOM COMPONENTS

### 
.accordion-button:not(.collapsed) {
  &::after {
    transform: rotate(-180deg);
    transition: transform 0.3s ease;
  }
}

### Build dashboard layout
<div class="dashboard-grid">
  <aside class="sidebar">...</aside>
  <main class="main-content">...</main>
  <footer class="dashboard-footer">...</footer>
</div>

// SCSS
.dashboard-grid {
  display: grid;
  grid-template:
    "sidebar main" auto
    "sidebar footer" auto / 250px 1fr;
  min-height: 100vh;
}

## 7. ACCESSIBILITY

### 
<nav aria-label="Main navigation">
  <div role="navigation" aria-current="page">...</div>
</nav>

<button aria-expanded="false" aria-controls="dropdownMenu">
  Toggle Menu
</button>

## 8. OPTIMIZATION

### 
// postcss.config.js
module.exports = {
  plugins: [
    require('@fullhuman/postcss-purgecss')({
      content: [
        './**/*.html',
        './src/**/*.js',
        './src/**/*.scss'
      ],
      safelist: {
        standard: [/show/, /collapsing/, /^modal-/],
        deep: [/tooltip/, /popover/]
      }
    })
  ]
}

## 9. DEPLOYMENT

### 
// package.json
"scripts": {
  "build": "sass scss/main.scss dist/css/main.min.css --style=compressed",
  "postbuild": "postcss dist/css/main.min.css -o dist/css/main.min.css"
}
## 10. FORM VALIDATION

### 
<form class="needs-validation" novalidate>
  <div class="mb-3">
    <label class="form-label">Email</label>
    <input type="email" class="form-control" required>
    <div class="invalid-feedback">
      Please provide a valid email
    </div>
  </div>
</form>

<script>
// Custom validation
(() => {
  'use strict'
  const forms = document.querySelectorAll('.needs-validation')
  Array.from(forms).forEach(form => {
    form.addEventListener('submit', event => {
      if (!form.checkValidity()) {
        event.preventDefault()
        event.stopPropagation()
      }
      form.classList.add('was-validated')
    }, false)
  })
})()
</script>

## 11. SMOOTH INTERACTIONS

### 
html {
  scroll-behavior: smooth;
}

// For older browsers
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function (e) {
    e.preventDefault()
    document.querySelector(this.getAttribute('href')).scrollIntoView({
      behavior: 'smooth'
    })
  })
})

## 12. STICKY NAVIGATION

### 
<header class="sticky-top">
  <nav class="navbar navbar-expand-lg">
    <!-- Nav content -->
  </nav>
</header>

<style>
.sticky-top {
  position: sticky;
  top: 0;
  z-index: 1020;
  backdrop-filter: blur(10px);
  background-color: rgba(255, 255, 255, 0.85);
}

[data-bs-theme="dark"] .sticky-top {
  background-color: rgba(33, 37, 41, 0.85);
}
</style>

## 13. DATA TABLES

### 
<div class="table-responsive-xxl">
  <table class="table table-hover align-middle">
    <thead class="table-light">
      <tr>
        <th scope="col">ID</th>
        <th scope="col">Name</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>1</td>
        <td>John Doe</td>
      </tr>
    </tbody>
  </table>
</div>

<style>
.table-responsive-xxl {
  @include media-breakpoint-down(xxl) {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }
}
</style>

## 14. NOTIFICATION SYSTEM

### 
<div class="toast-container position-fixed top-0 end-0 p-3">
  <div id="liveToast" class="toast" role="alert">
    <div class="toast-header">
      <strong class="me-auto">System</strong>
      <small>Just now</small>
      <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
    </div>
    <div class="toast-body">
      Action completed successfully!
    </div>
  </div>
</div>

<script>
// Programmatic control
const toast = new bootstrap.Toast(document.getElementById('liveToast'))
function showToast(message) {
  const toastBody = document.querySelector('.toast-body')
  toastBody.textContent = message
  toast.show()
}
</script>

## 15. DRAG AND DROP

### 
<div class="drag-container">
  <div class="drag-item" draggable="true">
    <div class="card">
      <div class="card-body">Item 1</div>
    </div>
  </div>
</div>

<script>
document.querySelectorAll('.drag-item').forEach(item => {
  item.addEventListener('dragstart', handleDragStart)
  item.addEventListener('dragover', handleDragOver)
  item.addEventListener('drop', handleDrop)
})

function handleDragStart(e) {
  e.dataTransfer.setData('text/plain', e.target.id)
  e.target.classList.add('dragging')
}
</script>

<style>
.dragging {
  opacity: 0.5;
  border: 2px dashed var(--bs-primary);
}
</style>