 Selecting multiple elements (HTML collection vs NodeList)
• Selecting multiple elements: There are three common ways of selecting multiple elements
with just one query. Please note that, you can pass in any valid CSS selector for these
methods, including, comma-separated CSS selectors for targeting multiple different
selectors

querySelectorAll() method: The querySelectorAll() method returns all elements
in the document that matches a specified CSS selector(s) as NodeList.
• Syntax: document.querySelectorAll(CSS selectors)
<ul id="listOfFruits">
<li class="red">Apple</li>
<li class="yellow">Mango</li>
<li class="yellow">Peach</li>
<li class="red">Rasberries</li>
</u>
Ex: document.querySelectorAll("li") //returns
a nodeList of all <li>

Selecting one element from a nodeList
o Selecting using the item() method : See example code above
var el = document.querySelectorAll(".yellow");
el.item(0);// selects the first li with yellow class
el.item(1);// selects the 2nd li with yellow class


Selecting using array syntax: See example code above
var el = document.getElementsByClassName("red");
console.log(el[1]); //selects the 2nd li with
red class


getElementsByTagName() method: The method takes a tag name and returns a
collection of all elements in the document with the specified tag name, as an
HTMLCollection object.
Syntax:
document.getElementsByTagName(tagname)
getElementsByTagName("li"); //returns
HTMLCollection with all <li>


Selecting one element from an HTMLCollection: See example code above

var el = document.getElementsByTagName("li");
console.log(el.item(0));// returns the 1st li
element
console.log(el[1]); // returns the 2nd li
element


getElementsByClassName(): Just like getElementsByTagName(), this method
also returns a live HTMLCollection representing an array-like object of all
elements with the specified class name.
Syntax:
document.getElementsByClassName(classname)
getElementsByClassName(“red”)// returns HTML
collection with all elements having the “red” class