Altering values (working with HTML attribute)
• Working with attributes: This is when you want to add, change or remove the attribute
value of an element.

className() method: The className property sets or returns the class name of
an element (the value of an element's class attribute). Note: To apply multiple
classes, separate them with spaces, like "test demo"
• Syntax: HTMLElementObject.className
• Let’s add 2 class names for <form> and print the added class names
var myForm = document.getElementById("formID");
myForm.className = "formClass1, formClass2"; //
"formClass1" and "formClass2" class names added
console.log(myForm.className);// prints
formClass1, formClass2
console.log(myForm.classList); // Also prints a
list containing the new class names "formClass1" and "formClass2"


ClassList() method: The classList property returns the class name(s) of an
element. This property can be used to add, remove and toggle CSS classes on an
element.
• Syntax: element.classList
• Let’s add a class name for our last name <input> and print the added
class name
var classForLastName=document.getElementsByName("lastName")[0];
classForLastName.classList.add("myLastName");// adds class name
console.log(classForLastName.classList);// prints a DOMToken list
containing the "myLastName" we just added above

Id property: The id property sets or returns the id of an element (the value of an
element's id attribute).
• Syntax: HTMLElementObject.id
• Let’s print the id for our <form> element
var myForm = document.getElementById("formID");
console.log(myForm.id); // prints the id name
"formID"

hasAttribute() method: The hasAttribute() method returns a Boolean value (true
or false) indicating whether the specified element has the specified attribute or not.
• Syntax: element.hasAttribute(attributename)
• Let’s check if our <form> element has “name” and “id” attributes
var myForm = document.getElementById("formID");
console.log(myForm.hasAttribute("name")); //
prints false because the <form> element doesn't
have a name attribute
console.log(myForm.hasAttribute("id")); //prints
true because <form> element has id attribute.

getAttribute() method: The getAttribute() method returns the value of the
attribute of an element.
• Syntax: element.getAttribute(attributename)
• Let’s print the value of the “name” attribute for our first name
<input>
var firstInputVal =
document.getElementsByTagName("input")[0];
console.log(firstInputVal.getAttribute("name"));
// returns "firstName" which is the value of the
"name" attribute for first name <input>

setAttribute() method: The setAttribute() method adds the specified attribute to
an element and gives it the specified value. If the specified attribute already exists,
only the value is set/changed. Otherwise, a new attribute is added with the specified
name and value.
• Syntax: element.setAttribute(attributename, attributevalue)
o Attributename parameter specifies the name of the attribute whose
value is to be set. Even if you put upper case for the name, the
attribute name is automatically converted to all lower-case when
setAttribute() is called
o attributevalue parameter is the value to assign to the attribute
• Let’s add a “value” attribute to our first name input. The value will
be a placehoder for our First Name input.
var firstInputVal =
document.getElementsByTagName("input")[0];
firstInputVal.setAttribute("value ", "first name");// placeholder input value of “first name”
added to our <input>

removeAttribute() method: The removeAttribute() method removes the specified
attribute from an element.
• Syntax: element.removeAttribute(attributename)
• Let’s remove the “type” attribute form the first name <input>
var firstInputVal =
document.getElementsByTagName("input")[0];
firstInputVal.removeAttribute("type");// removes
the “type” attribute
console.log(firstInputVal.getAttribute("type"));
// returns null because we just removed the
"type" attribute
