2. Promises
● Promises are the foundation of asynchronous programming in modern JavaScript.
    ● A promise is an object returned by an asynchronous function, which represents the
    current state of the operation.
    ● At the time the promise is returned to the caller, the operation often isn't finished, but the
    promise object provides methods to handle the eventual success or failure of the
    operation.
● A promise is a special kind of object in JavaScript that has 3 possible states:
    ○ Pending: It's the initial state, and it signifies that the corresponding task is yet to
    be resolved.
    ○ Fulfilled: Means the task has been completed successfully.
    ○ Rejected: Means the task has produced some kind of error.

Using the fetch() API
○ fetch() API - is an asynchronous Web API that is used to make HTTP requests to
a server and respond with a response data.
Example :
console.log(fetch("https://randomuser.me/api"));
output: Promise{<pending>} 
We see we get a promise with a pending state
○ We can chain other operations to it to be followed once it becomes
fulfilled, using the “.then()” method

Chaining promises (.then( ) method)
○ Using the .then method we can perform additional operations once the promise
resolves/completes/fulfilled.
○ It can be applied on any promise returning function
○ Example : apply “.then” method to be executed once the promise object is
fulfilled.
fetch("https://randomuser.me/api")
.then((res) => res.json())
.then((data) => console.log(data.results[0]));te