2. Promises
● Promises are the foundation of asynchronous programming in modern JavaScript.
    ● A promise is an object returned by an asynchronous function, which represents the
    current state of the operation.
    ● At the time the promise is returned to the caller, the operation often isn't finished, but the
    promise object provides methods to handle the eventual success or failure of the
    operation.
● A promise is a special kind of object in JavaScript that has 3 possible states:
    ○ Pending: It's the initial state, and it signifies that the corresponding task is yet to
    be resolved.
    ○ Fulfilled: Means the task has been completed successfully.
    ○ Rejected: Means the task has produced some kind of error.

Using the fetch() API
○ fetch() API - is an asynchronous Web API that is used to make HTTP requests to
a server and respond with a response data.
Example :
console.log(fetch("https://randomuser.me/api"));
output: Promise{<pending>} 
We see we get a promise with a pending state
○ We can chain other operations to it to be followed once it becomes
fulfilled, using the “.then()” method

Chaining promises (.then( ) method)
○ Using the .then method we can perform additional operations once the promise
resolves/completes/fulfilled.
○ It can be applied on any promise returning function
○ Example : apply “.then” method to be executed once the promise object is
fulfilled.
fetch("https://randomuser.me/api")
.then((res) => res.json())
.then((data) => console.log(data.results[0]));


Catching errors (.catch( ) method)
○ The fetch() API can throw an error for many reasons (for example, because there
was no network connectivity or the URL was malformed in some way) and we are
throwing an error ourselves if the server returned an error.
○ To support error handling, Promise objects provide a catch() method.
○ This is a lot like then(): you call it and pass in a handler function. However,
while the handler passed to then() is called when the asynchronous operation
succeeds, the handler passed to catch() is called when the asynchronous
operation fails/rejected.
○ If you add catch() to the end of a promise chain, then it will be called when any
of the asynchronous function calls fail. So you can implement an operation as
several consecutive asynchronous function calls, and have a single place to handle
all errors.
○ Example : apply “.catch” method to be executed once the promise object is
Rejected.
fetch("https://randomuser123.me/api")
.then((res) => res.json())
.then((data) => console.log(data.results[0]))
.catch((err) => console.log("Something went wrong
>>> ", err));