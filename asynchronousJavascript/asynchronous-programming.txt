Asynchronous Programming
● Definition
○ Asynchronous programming is a technique that enables your program to start a
potentially long-running task and still be able to be responsive to other events
while that task runs, rather than having to wait until that task has finished. Once
that task has finished, your program is presented with the result.
○ Asynchronous tasks are the ones that, while they execute, they don't block the
execution thread. So the program can still perform other tasks while the
asynchronous task is being executed.
○ These kinds of tasks are "non blocking". This technique comes in handy specially
for tasks that take a long time to execute, as by not blocking the execution thread
the program is able to execute more efficiently.
○ Many functions provided by browsers, especially the most interesting ones, can
potentially take a long time, and therefore, are asynchronous.
■ For example:
● Making HTTP requests using fetch()
● Accessing a user's camera or microphone using getUserMedia()
● Asking a user to select files using showOpenFilePicker()
○ Even though you may not have to implement your own asynchronous functions
very often, you are very likely to need to use them correctly.

Why Asynchronous Programming?
○ Enhances performance by handling time-consuming operations efficiently.
○ Prevents blocking the user interface (UI) and allows concurrent operations.
○ Enables better handling of tasks like network requests, file operations, etc

How does the Browser & JS engine work together to execute asynchronous 

3. Web APIs
● Web APIs are a set of features and functionalities that the browser uses to
enable JavaScript to execute.
● These features include
○ DOM manipulation,
○ HTTP requests (fetch method),
○ setTimeout among other things, and


Think of it like a different "execution place" rather than the call stack.
When the call stack detects that the task it's processing is web API-related,
it asks the web API "Hey API, I need to get this done", and the web API
takes care of it, allowing the call stack to continue with the next task in the
stack.

Example using setTimeout() API
console.log("task1");
setTimeout(() => console.log("task2"), 0);
console.log("task3");
○ Here, we're logging three separate strings, and on the second one we're
using setTimeout to log it after 0 milliseconds. Which should be,
according to common logic, instantly. So one should expect the
console to log: "task1", then "task2", and then "task3".
○ But that's not what happens:
○ And if we had a look at our call stack during the program, It would
look like this:
1. Call stack starts off empty at the start of the program.
2. console.log('task1') is added to the call stack and executed.
3. console.log('task1') is removed from the call stack once finished.
4. setTimeout(console.log('task2')) is added to the call stack, but it's not
executed.
5. setTimeout(console.log('task2')) disappears from the call stack, because
it was sent to the web API.
6. console.log('task3') is added to the call stack and executed.
7. console.log('task3') is removed from the call stack once finished.
8. console.log('task2') "mysteriously" hops into the call stack and is
executed.
9. console.log('task2') is removed from the call stack once finished.
❖ To explain this "mysterious" reappearance of the setTimeout task, we need to
introduce more components that are part of the browser runtime: the callback
queue, and the event loop.

4. Callback Queue
    ● Callback queue is a queue that stores the tasks that the web APIs return.
    ● Once the JavaScript engine finishes executing the synchronous tasks on
    the call stack, it continues to execute the asynchronous code found on the
    callback queue.
    ● Note: Unlike the call stack, the callback queue follows the FIFO order
    (First In, First Out), meaning the callback function that first gets into the
    queue has the opportunity to go out first.
