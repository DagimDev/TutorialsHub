Synchronous Programming
● Definition
○ Synchronous tasks are the ones that execute sequentially, one after the other, and
    while they're being executed nothing else is being done. At each line of the
    program, the browser waits for the task to finish before jumping to the next one.
○ These kinds of tasks are "blocking", because while they execute they block the
    ecution thread, preventing it from doing anything else.
○ Synchronous JS Example:
■ const studentName = "Abebe";
■ const greeting = `Hello, my name is ${studentName}!`;
■ console.log(greeting);
■ In the above example
    1. Declares a string called studentName.
    2. Declares another string called greeting, which uses studentName.
    3. Outputs the greeting to the JavaScript console.
■ Note that the browser effectively steps through the program one line at a
    time, in the order we wrote it. At each point, the browser waits for the line
    to finish its work before going on to the next line. It has to do this because
    each line depends on the work done in the preceding lines. That makes this
    a synchronous program.

How does the Browser & JS engine work together to execute synchronous JS
There are 5 major tools involved to make this happen
1. Memory/JavaScript heap
2. Call stack
3. Web APIs
4. Callback queue
5. Event loop

1. Memory/JavaScript heap
● The JavaScript heap is where objects are stored when we define functions
or variables.

2. Call stack
● This is the synchronous part of the JavaScript engine component that
    tracks the current code being executed and lets the JavaScript engine know
    what code to execute next.
● The way it works is quite simple. When a task is to be executed, it's added
    to the call stack. When it's finished, it's removed from the call stack. This
    same action is repeated for each and every task until the program is fully
    executed.
● Note: Everything that happens inside the call stack is sequential as this is
    the synchronous part of JavaScript. JavaScript's main thread makes sure
    that it takes care of everything in the stack before anything else.

1. Call stack starts off empty at the start of the program.
2. printSquare(4) is added to the call stack and executed.
3. As printSquare(4) calls the function square(4), square(4) is added to the call stack
and executed as well. Note that as the execution of printSquare(4) isn't finished
yet, it's kept on the stack.
4. As square(4) calls multiply(4,4), multiply(4,4) is added to the call stack and
executed as well.
5. multiply(4,4) is removed from the call stack once finished.
6. square(4) is removed from the call stack once finished.
7. printSquare(4) is removed from the call stack once finished. End of the program.