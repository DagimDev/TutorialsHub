The main Bash commands 
File & Directory Operations
● Directory: when we discuss Bash commands, we will use the term “directory” more often.
    Please know that directory is another name for folder.
▪ pwd: It prints full path of your current/working directory
cd: It will change the directory you are currently in so that you can manipulate the
    different files and directories in your system. It is basically going to a different
    folder and double clicking 
ls: Lists contents of the current directory, whether files or folders. It’s the same as
    opening a folder in file explorer to see its contents 
mkdir: Makes/creates a new directory. It is the same as you right clicking and
    creating a folder
touch: This is going to be the easiest way to create a new file in a current
    directory. It is the same as right clicking on a folder and creating a new file
mv: It moves or renames directory.
Example: mv style.css CSS. This command will move the style.css file
    found in your current directory to the CSS folder
● Example: mv style.css custom.css. This comand will rename the file
    style.css to custom.css It is the same as right clicking on style.css to
    rename it 
rm	Delete file	rm file.txt (use -r for folders)
rm and rmdir: Both remove directories. However, rmdir will only delete empty
    directories, whereas rm will remove directories that may contain content such as
    files and subdirectories.
• rmdir can only remove empty directories
• rm removes both files and non-empty directories.
• rm -r removes both the directory and the file within it.
• rm -r -rf removes recursively and forcefully all files in that directory and
    the directory itself.
• Example: rm -r CSS will removes the CSS folder (this folder will not be
    removed by rm unless it has files or folders in it)
• Example: rmdir CSS will remove the CSS folder, if it has not files or
    folders in it. 
cp	Copy file/folder	cp file.txt backup/

File Content & Editing
echo:
● Using echo without option: It prints text to the terminal window.
Example: echo “hello world” prints “hello world” on terminal
● Using echo with fie name only: It creates a file. Example: echo >
    style.css creates the style.css file
● Using echo with text and file name: creates the file and writes the text
    in the file. Example: echo "Hello" > index.html, creates an index.html
    file and types “Hello” on the file
cat	View file	cat script.js
nano	Text editor	nano file.txt (Ctrl+X to exit)
grep: It searches for a string in groups of files from current directory
• Example: grep Sam my.txt your.txt : This command is basically saying
    search for “Sam” string in my.txt and your.txt files found under your
    current directory
System & Permissions
chmod: This command is used to change the permissions of a file in a directory.
• File/folder owners: Each file is associated with an owner and a group
    and assigned with permission access rights for three different classes of
    users:
□ The file owner
□ The group owners/members
□ Other users (everybody else)

File/folder permission: There are three file permission types that apply
    to each class of users above
□ The read permission
□ The write permission
□ The execute/running program permission
□ Interpreting file permission listing: Example: rwxrwxrwx This
    is interpreted to mean that
▪ The first set of rwx is for the owner: File owner has
    permission to read, write and execute
▪ The second set of rwx is for the group owner of the
    file: The group also has permission to read, write and
    execute
▪ The third set of rwx is for all other users of the file:
    All other users also has permission to read, write and
    execute
    
Changing file access permissions: File access permissions can
be changed by a numerical (octal) chmod specification
▪ ( r ) read permission is given the value 4
▪ ( w ) write permission is given the value 2
▪ ( e ) execute permission is given the value 1
▪ ( - ) indicates the file is a regular file/ not executable file
□ The above values are added together for any one user
category:
▪ 0 means no permissions at all
▪ 1 means there is permission to execute only
▪ 2 means there is permission to write only
▪ 3 means there is permission to write and execute (1+2)
▪ 4 means there is permission to read only
▪ 5 means there is permission to read and execute (4+1)
▪ 6 means there is permission to read and write (4+2)
▪ 7 means there is permission to read and write and execute
    (4+2+1). 7 means there is no restrictions on permissions.
    Anybody may do anything, generally, not a desirable
    setting
□ File permission to 664: This means rw-rw-r--
▪ The first 6: File owner has permission to read and write
    (4 + 2 + 0)
▪ The second 6: The group owners of the file also have the
    permission to read and write (4 + 2 + 0)
▪ The third 4: All other users have permission to read only
    (4+ 0 + 0)
□ Command to view file permission: ls -l filename.txt
□ Command to change file permission:
▪ Example: chmod 660 my.txt