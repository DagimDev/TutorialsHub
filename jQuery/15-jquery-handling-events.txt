To handle events in jQuery, just like any other method in jQuery, you start by selecting the
element you want to respond to. We said that selection of elements in jQuery creates a
jQuery object. It is on these objects that we apply the different jQuery event methods.
jQuery has various methods to attach a handler function to an event for selected elements.

jQuery’s on() method
    ▪ The on() method is used to handle various kinds of events on selected elements
    ▪ Syntax: $(selector).on(event, childSelector, data, function, map)
    ▪ Note: Event handlers attached using the on() method will work for both current
    and FUTURE elements (on new element created by JavaScript dynamically).
    ▪ The on() method in jQuery accepts an object containing multiple events and
    handlers. Meaning, it does the following things:
    ▪ Bind any event triggered on the selected elements to an event handler

UI/DOM element events: focus, blur, change
    • blur(): This method triggers the blur event or attaches a function when
    blur event occurs. Blur event occurs when an element loses focus.
    
Keyboard events:
    • keypress(): This method attaches a function to run when a keypress event
    occurs. Note: keypress event is not fired for all keys (Ex. ALT, CTRL,
    SHIFT, ESC). Example:
    $("input").keypress(function () {
    $("label").css("background-color", "pink");
    });

Mouse events: click, dbclick, mouseenter, mouseleave
• click(): The click() method attaches an event handler function to an HTML
element when the user clicks on the HTML element. 

Form events: submit, change
    • submit(): This method is used to submit an HTML form i.e. <form> or to
    attach a function to run when a submit event occurs. Note: This event can
    only be used on <form> elements.
$("form").on("submit",
backgroundChanger);
function backgroundChanger() {
$("#firstInput").css("backgroundcolor", "pink");
}

Browser/window /document events: ready(), load(), resize(), unload(), error(), scroll()
    • $(document).ready(): This method allows us to execute a function when
    the document is fully loaded. It is good practice to wait for the document
    (HTML and CSS) to be fully loaded and ready before working with it. This
    also allows you to have your JavaScript code before the body of your
    document, in the head section.