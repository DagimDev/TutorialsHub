JavaScript Object Shorthand Syntax
    JavaScript provides several handy shorthand notations for working with objects that can make your code cleaner and more concise. Here are the most useful ones:
1. Property Value Shorthand (ES6+)
When the property name matches the variable name:

// Long way
const name = 'John';
    const age = 30;
    const user = {
        name: name,
        age: age
    };

// Shorthand
const user = { name, age };

2. Method Shorthand (ES6+)
For defining methods in objects:

// Long way
const calculator = {
  add: function(a, b) {
    return a + b;
  }
};

// Shorthand
const calculator = {
  add(a, b) {
    return a + b;
  }
};

3. Computed Property Names (ES6+)
When you need dynamic property names:

javascript
const key = 'username';
const value = 'js_developer';

// Long way
const obj = {};
obj[key] = value;

// Shorthand
const obj = { [key]: value };

. Object Destructuring
Extract properties into variables:

javascript
const user = { name: 'Alice', age: 25 };

// Long way
const name = user.name;
const age = user.age;

// Shorthand
const { name, age } = user;

5. Spread Operator (ES6+)
Copy or merge objects:

javascript
const obj1 = { a: 1, b: 2 };
const obj2 = { c: 3, d: 4 };

// Shallow copy
const clone = { ...obj1 };

// Merge objects
const merged = { ...obj1, ...obj2 };

6. Short-circuit Evaluation for Defaults
Set default values concisely:

javascript
const options = { timeout: undefined };

// Long way
const timeout = options.timeout !== undefined ? options.timeout : 1000;

// Shorthand
const timeout = options.timeout || 1000; // OR operator
const timeout = options.timeout ?? 1000; // Nullish coalescing (better for falsy values)