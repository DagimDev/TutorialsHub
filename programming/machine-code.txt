1. Machine Code (Binary)
What: Direct CPU instructions in binary (1s/0s)

Level: Lowest (hardware-level)

Example: 10110000 01100001 (x86 mov instruction)

Characteristics:

No translation needed

Processor-specific

Extremely fast

Human-unreadable

2. Assembly Language
What: Human-readable machine code with mnemonics

Level: Low-level

Example (x86):

asm
MOV AL, 61h       ; Load 61h into AL register
ADD AX, BX        ; Add BX to AX
Characteristics:

1:1 with machine code

Requires assembler

Hardware-dependent

Used in firmware/OS kernels

3. High-Level Compiled Languages
What: Human-readable code â†’ compiled to machine code

Level: High-level

Examples: C, C++, Go, Rust

Characteristics:

Platform-specific binaries

Faster execution

Requires recompilation for different platforms

Example (C):

c
#include <stdio.h>
int main() {
  printf("Hello World");
  return 0;
}

4. High-Level Interpreted Languages
What: Code executed line-by-line at runtime

Level: High-level

Examples: Python, JavaScript, Ruby
Characteristics:

Platform-independent

Slower than compiled

No separate compilation step

Example (Python):

python
print("Hello World")

1. Assembly-like JS (Low-level Simulation)
javascript
// Simulating register operations
const registers = { ax: 0, bx: 0, cx: 0 };

function mov(target, value) {
  registers[target] = value;
}

function add(target, source) {
  registers[target] += registers[source];
}

// Usage:
mov('ax', 5);
mov('bx', 10);
add('ax', 'bx');
console.log(registers.ax); // 15

2. High-Level Compiled Style (TypeScript)
typescript
// Strongly-typed compiled approach
interface User {
  id: number;
  name: string;
}

function createUser(id: number, name: string): User {
  return { id, name };
}

// Type checking at compile time
const user = createUser(1, "Alice");

3. Interpreted JS Features
javascript
// Dynamic interpreted behavior
function dynamicAdd(a, b) {
  return a + b;
}

// Works with any type at runtime
console.log(dynamicAdd(2, 3));     // 5
console.log(dynamicAdd("2", "3")); // "23"