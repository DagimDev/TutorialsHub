In Most Recursive Functions:
Yes — the recursive call is usually done first, and the other operations (like *, +, pushing to array, etc.) happen afterward when the function returns.

This is called a post-order approach: first recurse, then compute.

Example: Factorial (Post-Order)

function factorial(n) {
  if (n === 0) return 1;              // base case
  return n * factorial(n - 1);        // recursive call happens first
}
Call stack builds → then results multiply on the way back.

But: Recursive Call Doesn't Have To Come First
Some recursive functions do their work before or between the recursive calls.

2. ✅ Pre-Order (do work before recursive call)
function countdown(n) {
  if (n === 0) return;
  console.log(n); // work before recursion
  countdown(n - 1);
}
Output: n ... 3 2 1

3. ✅ In-Order (do work between two recursive calls)
Often used in trees:

function traverse(node) {
  if (!node) return;
  traverse(node.left);
  console.log(node.value); // work in between
  traverse(node.right);
}