What Is the Call Stack in JavaScript?

The call stack is a data structure that JavaScript uses to keep track of function execution. It follows the Last-In, First-Out (LIFO) principle.

The call stack is a fundamental mechanism JavaScript uses to track function execution. Let me break it down clearly with examples relevant to your Merge Sort questions.

The call stack is:

A LIFO (Last-In, First-Out) data structure that tracks function calls

JavaScript's "to-do list" of functions that need to be executed

Where the engine stores execution contexts (variable environments)

How It Works

When a function is invoked, it's added ("pushed") onto the top of the call stack.

When the function completes, it's removed ("popped") from the stack.

The browser's JavaScript engine uses the call stack to manage the order in which functions are run.


üß† Visual Example:

function greet() {
  console.log("Hello");
  sayBye();
}

function sayBye() {
  console.log("Goodbye");
}

greet();

Call Stack Flow:

Call Stack:
1. greet() ‚Üí pushed
2. sayBye() ‚Üí pushed (inside greet)
3. sayBye() ‚Üí popped (finished)
4. greet() ‚Üí popped (finished)

Output:  Hello
         Goodbye

function greet() {
  console.log("Hello!");
}

function sayName() {
  greet();
  console.log("John");
}

sayName();
Call Stack Flow:

sayName() is pushed to stack

greet() is pushed when called inside sayName

greet() executes ("Hello!" logs), then pops off

sayName() continues, logs "John", then pops off

Stack is empty

[Top of Stack]
greet()       ‚îÇ
sayName()     ‚îÇ ‚Üê Bottom of Stack

üîÅ Call Stack in Recursion

With recursion, each recursive call is a new function frame pushed onto the stack.

Example:

function countDown(n) {
  if (n === 0) return;
  console.log(n);
  countDown(n - 1);
}

countDown(3);

Stack Trace:

countDown(3) ‚Üí pushed
countDown(2) ‚Üí pushed
countDown(1) ‚Üí pushed
countDown(0) ‚Üí pushed
countDown(0) ‚Üí popped
countDown(1) ‚Üí popped
countDown(2) ‚Üí popped
countDown(3) ‚Üí popped


Why Call Stack Matters for Recursion (Like Merge Sort)

When you called mergeSort([-6, 20, 8, -2, 4]), here's what happened in the stack:

Initial Call
mergeSort([-6,20,8,-2,4])
After First Split
mergeSort([8,-2,4])       ‚îÇ Waiting for right side
mergeSort([-6,20])        ‚îÇ
mergeSort([-6,20,8,-2,4]) ‚îÇ
Deepest Recursion Level
mergeSort([4])            ‚îÇ Base case - returns first
mergeSort([-2,4])         ‚îÇ
mergeSort([8,-2,4])       ‚îÇ
mergeSort([-6,20])        ‚îÇ
mergeSort([-6,20,8,-2,4]) ‚îÇ

Key Properties
LIFO Behavior
Last function pushed is first to complete (like stacking plates)

Stack Frames Contain:

Function arguments

Local variables

Where to return after completion

Stack Overflow
Happens with infinite recursion when the stack grows beyond its limit (~10,000-50,000 calls in most browsers)

Visualizing Merge Sort's Stack
For your mergeSort([-6, 20]) example:

Step 1:
mergeSort([-6,20]) called
‚Üí Pushes to stack

Step 2:
It calls mergeSort([-6])
‚Üí New frame pushed on top

Step 3:
Base case reached for [-6]
‚Üí Pops mergeSort([-6]) from stack

Step 4:
Back to mergeSort([-6,20])
‚Üí Now calls mergeSort([20])
‚Üí New frame pushed

Step 5:
Base case reached for [20]
‚Üí Pops mergeSort([20])

Step 6:
Back to mergeSort([-6,20])
‚Üí Now calls merge([-6], [20])

Understanding Why mergeSort([4]) Executes First

The Golden Rule of Recursion
"Complete the deepest call first" - JavaScript always finishes the most nested function call before returning to outer calls.

Step-by-Step Execution
For your array [8, -2, 4] (simplified example):

1. Initial Call
javascript
mergeSort([8, -2, 4])
Splits into:

left = [8]

right = [-2, 4]

Must evaluate mergeSort([8]) and mergeSort([-2, 4]) before merging

2. First Recursive Branch (Left Side)
javascript
mergeSort([8]) // Base case (length 1)
Returns immediately: [8]

Now the stack knows left is resolved

3. Second Recursive Branch (Right Side)
javascript
mergeSort([-2, 4])
Splits into:

left = [-2]

right = [4]

Now must evaluate mergeSort([-2]) and mergeSort([4])

4. Evaluating the Nested Calls
javascript
mergeSort([-2]) // Base case ‚Üí returns [-2]
mergeSort([4])  // Base case ‚Üí returns [4]
Here's the key insight:

mergeSort([4]) is the last call made in this branch

Therefore, it's at the top of the call stack

JavaScript always completes the topmost stack frame first

Visualizing the Call Stack
When we reach mergeSort([4]), the stack looks like this (top to bottom):

[Top of Stack]
mergeSort([4])         ‚Üê Currently executing (will resolve first)
mergeSort([-2,4])
mergeSort([8,-2,4])
[Bottom of Stack]
Why This Order Matters
Merge Sort's Dependencies:

Can't merge [-2] and [4] until both are resolved

[4] must return before we can combine results

Natural Recursion Behavior:

javascript
return merge(mergeSort(left), mergeSort(right));
The rightmost mergeSort call can't start until the left one finishes

But within each call, we go deeper until hitting base cases

Complete Execution Flow
mergeSort([8,-2,4]) starts

Calls mergeSort([8]) (base case, returns [8])

Calls mergeSort([-2,4])

Calls mergeSort([-2]) (base case, returns [-2])

Calls mergeSort([4]) (base case, returns [4])

Now unwinds:

Merges [-2] and [4] ‚Üí [-2,4]

Finally merges [8] and [-2,4] ‚Üí [-2,4,8]

Key Takeaways
Base cases resolve first because they're at the top of the call stack

Recursion drills down to the simplest case before combining results

The stack ensures proper ordering - no function is "forgotten"

This behavior is identical to how you'd solve a mathematical expression with nested parentheses - you always evaluate the innermost parentheses first.

Stack Overflow

Happens when a function calls itself too many times without reaching the base case.

The stack grows too large and crashes.

function infinite() {
  infinite();
}

infinite(); // ‚ùå Stack overflow

Summary

Term                                    Meaning
Call Stack                              Keeps track of function execution

Push                                    Add a function to the stack

Pop                                     Remove a function when it finishes

LIFO                                    Last-In, First-Out order

Stack Overflow                          Error when stack grows too big