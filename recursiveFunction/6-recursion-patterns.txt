===============================
🧩 Recursion Patterns in JavaScript
===============================

1. 🔁 Basic Pattern
-----------------------
function recurse(n) {
  if (n === 0) return;
  recurse(n - 1);
}


2. 🪓 Divide and Conquer
-----------------------
Used in: Merge Sort, Quick Sort

function mergeSort(arr) {
  if (arr.length <= 1) return arr;

  const mid = Math.floor(arr.length / 2);
  const left = mergeSort(arr.slice(0, mid));
  const right = mergeSort(arr.slice(mid));

  return merge(left, right);
}

3. 🔄 Backtracking
-----------------------
Used in: Maze solving, Sudoku, N-Queens

function solve(board, row) {
  if (row === board.length) {
    console.log("Solution found");
    return;
  }

  for (let col = 0; col < board.length; col++) {
    if (isSafe(board, row, col)) {
      board[row][col] = true;
      solve(board, row + 1);
      board[row][col] = false; // backtrack
    }
  }
}

4. 💡 Helper Function Pattern
-----------------------
Used when recursion needs additional arguments.

function sumArray(arr) {
  function helper(index) {
    if (index >= arr.length) return 0;
    return arr[index] + helper(index + 1);
  }
  return helper(0);
}