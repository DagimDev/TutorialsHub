## 1. SETUP & CONFIGURATION

### Initialize Tailwind CSS project
# Install via npm
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init

# Create tailwind.config.js
module.exports = {
  content: ["./src/**/*.{html,js}"],
  theme: {
    extend: {},
  },
  plugins: [],
}

### Configure base styles
/* src/input.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  h1 {
    @apply text-4xl font-bold;
  }
}

## 2. CORE UTILITIES

### Implement responsive design
<div class="w-full md:w-1/2 lg:w-1/3">
  <!-- Responsive width -->
</div>

### Add dark mode support
// tailwind.config.js
module.exports = {
  darkMode: 'class', // or 'media'
}

<div class="bg-white dark:bg-gray-800">
  <h1 class="text-gray-900 dark:text-white">Title</h1>
</div>


## 3. LAYOUT COMPONENTS

### Build responsive navbar
<nav class="flex flex-wrap items-center justify-between p-4">
  <div class="flex items-center">
    <a href="#" class="text-xl font-bold">Logo</a>
  </div>
  <div class="hidden md:block">
    <a href="#" class="px-4 hover:text-blue-500">Home</a>
  </div>
</nav>

### Create card components
<div class="max-w-sm rounded overflow-hidden shadow-lg">
  <div class="px-6 py-4">
    <h2 class="font-bold text-xl mb-2">Card Title</h2>
    <p class="text-gray-700">Card content</p>
  </div>
</div>

## 4. INTERACTIVE ELEMENTS

### Style buttons
<button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
  Primary Button
</button>

<button class="border border-blue-500 text-blue-500 hover:bg-blue-50 px-4 py-2 rounded">
  Outline Button
</button>

### Add form elements
<form class="space-y-4">
  <input type="text" class="border rounded p-2 w-full" placeholder="Username">
  <select class="border rounded p-2 w-full">
    <option>Option 1</option>
  </select>
  <button type="submit" class="bg-blue-500 text-white p-2 rounded w-full">
    Submit
  </button>
</form>

## 5. ADVANCED TECHNIQUES

### Create custom animations
/* tailwind.config.js */
module.exports = {
  theme: {
    extend: {
      animation: {
        'spin-slow': 'spin 3s linear infinite',
      }
    }
  }
}

<div class="animate-spin-slow">ðŸŒ€</div>

### Extend color palette
// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      colors: {
        brand: {
          100: '#f0f9ff',
          500: '#0ea5e9',
          900: '#082f49',
        }
      }
    }
  }
}

<div class="bg-brand-500 text-brand-100">Brand colors</div>

## 6. PERFORMANCE OPTIMIZATION

### Configure PurgeCSS
// tailwind.config.js
module.exports = {
  purge: {
    enabled: true,
    content: ['./src/**/*.html'],
    options: {
      safelist: ['bg-red-500', 'px-4'],
    }
  }
}

## 7. TYPOGRAPHY SYSTEM

### Implement typography plugin
npm install @tailwindcss/typography

// tailwind.config.js
plugins: [require('@tailwindcss/typography')]

<article class="prose prose-lg max-w-none">
  <h1>Article Title</h1>
  <p>Professional typography for content</p>
</article>

## 8. CUSTOM SPACING

### Add custom spacing scale
// tailwind.config.js
theme: {
  extend: {
    spacing: {
      '128': '32rem',
      '144': '36rem',
    }
  }
}

<div class="mt-[32rem]">Custom spacing</div>

## 9. GRADIENT BACKGROUNDS

### Create gradient backgrounds
<div class="bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500">
  Rainbow gradient
</div>

// Custom gradient via config
theme: {
  extend: {
    backgroundImage: {
      'custom-gradient': 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
    }
  }
}

## 10. INTERACTIVE COMPONENTS

### Build dropdown components
<div class="relative group">
  <button class="px-4 py-2">Menu</button>
  <div class="hidden group-hover:block absolute z-10">
    <a href="#" class="block px-4 py-2 hover:bg-gray-100">Item 1</a>
  </div>
</div>

### Add modal dialogs
<div x-data="{ open: false }">
  <button @click="open = true">Open</button>
  <div x-show="open" @click.away="open = false" class="fixed inset-0 z-50">
    <div class="modal-content">Content</div>
  </div>
</div>

## 11. NOTIFICATION SYSTEM

### Implement toast notifications
<div x-data="{ show: false }" 
     x-show="show" 
     x-transition
     class="fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded">
  Success!
</div>

<script>
function showToast() {
  const toast = document.querySelector('[x-data]')
  toast._x_dataStack[0].show = true
  setTimeout(() => toast._x_dataStack[0].show = false, 3000)
}
</script>

## 12. DATA DISPLAY

### Create responsive tables
<div class="overflow-x-auto">
  <table class="min-w-full divide-y divide-gray-200">
    <thead class="bg-gray-50">
      <tr>
        <th class="px-6 py-3 text-left">Header</th>
      </tr>
    </thead>
    <tbody class="divide-y divide-gray-200">
      <tr class="hover:bg-gray-50">
        <td class="px-6 py-4">Data</td>
      </tr>
    </tbody>
  </table>
</div>

### Add aspect ratio containers
<div class="aspect-w-16 aspect-h-9">
  <iframe src="https://www.youtube.com/embed/..."></iframe>
</div>

## 13. COMPLEX COMPONENTS

### Build tabbed interfaces
<div x-data="{ activeTab: 1 }">
  <div class="flex border-b">
    <button @click="activeTab = 1" :class="{ 'border-b-2 border-blue-500': activeTab === 1 }">Tab 1</button>
  </div>
  <div x-show="activeTab === 1">Content 1</div>
</div>

### 21: Create accordion components
<div x-data="{ open: false }">
  <button @click="open = !open" class="flex justify-between w-full">
    <span>Title</span>
    <span x-text="open ? 'âˆ’' : '+'"></span>
  </button>
  <div x-show="open" x-collapse>Content</div>
</div>

## 14. ANIMATIONS & TRANSITIONS

### Add custom transitions
// tailwind.config.js
theme: {
  extend: {
    transitionProperty: {
      'height': 'height',
      'width': 'width',
    }
  }
}

<div class="transition-all duration-300 hover:scale-105">
  Hover me
</div>